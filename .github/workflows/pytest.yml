name: pytest
on:
    push:
    release:
     types:
       - published


jobs:
  test:
    strategy:
      max-parallel: 2
      matrix:
        python-version: ["3.12"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install and configure Poetry  # This could be cached, too...
        uses: snok/install-poetry@v1.3.3
        with:
          version: 1.7.1
          virtualenvs-in-project: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install --with "dev"
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - name: test with pytest
        run: 
          source $VENV
          pytest

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.11'
      - name: Install and configure Poetry  # This could be cached, too...
        uses: snok/install-poetry@v1.3.3
        with:
          version: 1.7.1
          virtualenvs-in-project: true

      - name: Build sdist
        run: poetry build

      - uses: actions/upload-artifact@v4
        with:
          path: dist/*.tar.gz


  upload_pypi:
    needs: [test, build_sdist]
    runs-on: ubuntu-latest
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    # upload to PyPI on every tag starting with 'v'
    #if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          name: Publish package distributions to PyPI
